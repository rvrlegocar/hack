-- Define variables to track if the loop should run and to prevent multiple concurrent loops
local isLooping = false
local isChecking = false

-- Offsets for teleportation
local xOffset = 0
local yOffset = 2
local zOffset = 0

-- Function to create a button
local function createButton()
    -- Create a ScreenGui to hold GUI elements
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomGui"  -- Give it a name if needed
    screenGui.Parent = game.Players.LocalPlayer.PlayerGui  -- Parent to PlayerGui for visibility

    -- Create the button inside the ScreenGui
    local button = Instance.new("TextButton")
    button.Text = "Start Loop (OFF)"
    button.Size = UDim2.new(0, 200, 0, 50) -- Width, Height
    button.Position = UDim2.new(0, 10, 0, 10) -- X position, Y position
    button.Parent = screenGui  -- Parent the button to the ScreenGui

    -- Event handler for when button is clicked
    button.MouseButton1Click:Connect(function()
        -- Toggle the loop state
        isLooping = not isLooping
        
        -- Update button text based on loop state
        if isLooping then
            button.Text = "Stop Loop (ON)"
        else
            button.Text = "Start Loop (OFF)"
        end
    end)
end

-- Call the function to create the button
createButton()

-- Function to get the position of a model
local function getModelPosition(model)
    if model.PrimaryPart then
        return model.PrimaryPart.Position
    else
        local totalPosition = Vector3.new(0, 0, 0)
        local partCount = 0
        
        for _, part in pairs(model:GetChildren()) do
            if part:IsA("BasePart") then
                totalPosition = totalPosition + part.Position
                partCount = partCount + 1
            end
        end
        
        if partCount > 0 then
            return totalPosition / partCount
        else
            return nil
        end
    end
end

-- Function to interact with items and loot
local function printContents(folder)
    local foundItem = false
    for _, item in pairs(folder:GetChildren()) do
        local itemPosition
        
        if item:IsA("BasePart") or item:IsA("MechPart") then
            itemPosition = item.Position
        elseif item:IsA("Model") then
            itemPosition = getModelPosition(item)
        end
        
        if itemPosition then
            foundItem = true
            -- Apply offsets to the item position
            local targetPosition = itemPosition + Vector3.new(xOffset, yOffset, zOffset)
            
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
            wait(0.1)
            
            -- Look downward after teleporting
            local humanoid = game.Players.LocalPlayer.Character.Humanoid
            local rootPart = humanoid.RootPart
            local camera = game.Workspace.CurrentCamera
            
            local rootPosition = rootPart.Position
            local lookAtPosition = rootPosition - Vector3.new(0, 10, 0) -- Adjust the downward offset as needed
            
            camera.CFrame = CFrame.new(camera.CFrame.Position, lookAtPosition)
            wait(0.1)
            
            -- Check for proximity prompt (assuming it's named "ProximityPrompt")
            local proximityPrompt = item:FindFirstChild("ProximityPrompt")
            if proximityPrompt then
                proximityPrompt:InputHoldBegin(Enum.KeyCode.E)
                wait(0.8)
                proximityPrompt:InputHoldEnd(Enum.KeyCode.E)
            end
        end
    end
    return foundItem
end

-- Function to check for loot and items
local function checkForLootAndItems()
    if isChecking then return end
    isChecking = true

    local player = game.Players.LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")

    if humanoid and humanoid.Health < humanoid.MaxHealth then
        player.Character:SetPrimaryPartCFrame(CFrame.new(0, -100, 0))
        isChecking = false
        return
    end

    local workspace = game:GetService("Workspace")
    local storagesFolder = workspace:FindFirstChild("Storages")
    local foundItems = false

    if storagesFolder then
        for _, item in pairs(storagesFolder:GetChildren()) do
            if item:IsA("Model") and item.Name == "Room" then
                local contentsFolder = item:FindFirstChild("Contents")
                if contentsFolder then
                    local lootFolder = contentsFolder:FindFirstChild("Loot")
                    if lootFolder then
                        foundItems = printContents(lootFolder) or foundItems
                    end

                    local itemsFolder = contentsFolder:FindFirstChild("Items")
                    if itemsFolder then
                        foundItems = printContents(itemsFolder) or foundItems
                    end
                end
            end
        end
    else
        print("Storages folder not found in Workspace.")
    end

    if not foundItems then
        player.Character:SetPrimaryPartCFrame(CFrame.new(0, -100, 0))
    end

    isChecking = false
end

-- Connect function to run checkForLootAndItems periodically
game:GetService("RunService").Heartbeat:Connect(function()
    if isLooping then
        checkForLootAndItems()
        wait(0.1) -- Adjust this value to control how frequently you want to check
    end
end)

-- Check for loot and items immediately if the player's character already exists
if game.Players.LocalPlayer.Character then
    checkForLootAndItems()
end

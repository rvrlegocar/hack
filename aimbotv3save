local ScreenGui = Instance.new("ScreenGui")
local ToggleButton = Instance.new("TextButton")
local POVCircle = Instance.new("Frame")

ScreenGui.Name = "AimBotToggleGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = ScreenGui
ToggleButton.Text = "Toggle Aimbot"
ToggleButton.Position = UDim2.new(1, -110, 0, 10)
ToggleButton.Size = UDim2.new(0, 100, 0, 50)
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true

POVCircle.Name = "POVCircle"
POVCircle.Parent = ScreenGui
POVCircle.Size = UDim2.new(0, 200, 0, 200)  -- Adjust the size as needed
POVCircle.Position = UDim2.new(0.5, -100, 0.5, -100)
POVCircle.BackgroundTransparency = 0.5
POVCircle.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
POVCircle.BorderSizePixel = 0
POVCircle.AnchorPoint = Vector2.new(0.5, 0.5)
POVCircle.ZIndex = 2

local aimBotEnabled = true
local predictionTime = 0.125

local function isVisible(target)
    local camera = game.Workspace.CurrentCamera
    local origin = camera.CFrame.Position
    local direction = (target.Position - origin).unit
    local ray = Ray.new(origin, direction * (target.Position - origin).magnitude)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, {game.Players.LocalPlayer.Character, target.Parent})
    return hit == nil
end

local function isInPOVCircle(screenPos)
    local povCenter = POVCircle.AbsolutePosition + POVCircle.AbsoluteSize / 2
    local radius = POVCircle.AbsoluteSize.X / 2
    return (screenPos - povCenter).magnitude <= radius
end

local function findVisiblePlayerInPOV()
    local localPlayer = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= localPlayer then
            local character = player.Character
            local head = character and character:FindFirstChild("Head")
            
            if head and isVisible(head) then
                local screenPos, onScreen = camera:WorldToScreenPoint(head.Position)
                if onScreen and isInPOVCircle(Vector2.new(screenPos.X, screenPos.Y)) then
                    return player
                end
            end
        end
    end
    
    return nil
end

local function calculateOffset(target)
    local head = target.Character and target.Character:FindFirstChild("Head")
    if head then
        local distance = (game.Workspace.CurrentCamera.CFrame.p - head.Position).magnitude
        local yOffset = -distance * 0.1
        return yOffset
    end
    return 0
end

local function updateCamera(targetPlayer)
    local head = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head")
    if head then
        local targetPosition = head.Position + Vector3.new(0, calculateOffset(targetPlayer), 0)
        local futurePosition = head.Velocity * predictionTime
        targetPosition = targetPosition + futurePosition
        game.Workspace.CurrentCamera.CFrame = CFrame.new(game.Workspace.CurrentCamera.CFrame.p, targetPosition)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if aimBotEnabled then
        local targetPlayer = findVisiblePlayerInPOV()
        if targetPlayer then
            updateCamera(targetPlayer)
        end
    end
end)

ToggleButton.MouseButton1Click:Connect(function()
    aimBotEnabled = not aimBotEnabled
    if aimBotEnabled then
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        ToggleButton.Text = "Aimbot On"
    else
        ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        ToggleButton.Text = "Aimbot Off"
    end
end)
